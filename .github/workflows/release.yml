name: Build and Release

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18" # Or whatever Node.js version you use

            - name: Install dependencies
              run: npm install

            - name: Check if commit has a 'gui' tag
              id: check_tag
              run: |
                  # Check if the current commit has a tag starting with 'gui'
                  if git tag --contains HEAD | grep -q '^gui'; then
                    echo "This commit is tagged as a gui update. Exiting workflow."
                    gh run cancel ${{ github.run_id }}
                    exit 1
                  fi

            - name: Run Rollup build
              run: npm run build

            - name: Get version from package.json
              id: get_version
              run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

            - name: Check for existing release
              id: check_release
              env:
                  GH_TOKEN: ${{ secrets.REPO_TOKEN }}
              run: |
                  echo "Checking for existing release with tag v${{ env.VERSION }}..."
                  existing_release=$(gh release list --json tagName --jq '.[] | select(.tagName == "v'${{ env.VERSION }}'") | .tagName')
                  echo "Found existing release: $existing_release"
                  if [ -n "$existing_release" ]; then
                    echo "Release v${{ env.VERSION }} already exists. Exiting workflow."
                    gh run cancel ${{ github.run_id }}
                    exit 1
                  fi

            - name: Create GitHub Release
              id: create_release
              uses: softprops/action-gh-release@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
              with:
                  token: ${{ secrets.REPO_TOKEN }}
                  files: dist/build.js
                  tag_name: v${{ env.VERSION }} # Tag with 'v' followed by version
                  name: Version ${{ env.VERSION }} # Title of the release
                  draft: false
                  prerelease: false
